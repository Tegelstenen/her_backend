import os
from datetime import date, datetime, timezone
from enum import Enum
from typing import Optional
from uuid import uuid4

import sqlalchemy as sa
from dotenv import load_dotenv
from sqlmodel import (
    Date,
    DateTime,
    Field,
    SQLModel,
    create_engine,
)

load_dotenv()


class User(SQLModel, table=True):
    __tablename__ = "users"  # type: ignore
    model_config = {"arbitrary_types_allowed": True}  # type: ignore

    """ FIELDS """
    # The id is optional because it will be generated by the database
    id: Optional[int] = Field(default=None, primary_key=True)
    name: Optional[str] = Field(max_length=50)
    telephone_number: str = Field(max_length=20, unique=True, index=True)
    birthday: Optional[date] = Field(default=None, sa_type=Date)
    last_message_at: Optional[datetime] = Field(
        default=None, sa_type=sa.DateTime(timezone=True)
    )  # type: ignore
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={"server_default": sa.func.now()},
        nullable=False,
    )
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={
            "onupdate": lambda: datetime.now(timezone.utc),
        },
        nullable=False,
    )


class Conversations(SQLModel, table=True):
    __tablename__ = "conversations"  # type: ignore
    model_config = {"arbitrary_types_allowed": True}  # type: ignore

    """ FIELDS """

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(
        foreign_key="users.id", index=True, ondelete="CASCADE"
    )

    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={"server_default": sa.func.now()},
        nullable=False,
        index=True,
    )


class Resources(SQLModel):
    citations: list[str]
    advice: str


class Subtask(SQLModel):
    id: str = Field(default_factory=lambda: str(uuid4()))
    description: str
    estimated_minutes: int
    completed: bool = False


class Metric(SQLModel):
    measurement: str
    target_value: Optional[int] = None


class Milestone(SQLModel, table=True):
    __tablename__ = "milestones"  # type: ignore
    model_config = {"arbitrary_types_allowed": True}  # type: ignore

    """ FIELDS """
    id: Optional[int] = Field(default=None, primary_key=True)
    goal_id: int = Field(foreign_key="goals.id", index=True, ondelete="CASCADE")
    title: str = Field(max_length=200)
    description: Optional[str] = Field(default=None)
    expected_completion_date: Optional[str] = Field(default=None)
    estimated_hours: Optional[int] = Field(default=None)
    completed: bool = Field(default=False)
    resources: Optional[list[Resource]] = Field(default=None, sa_type=sa.JSON)
    subtasks: Optional[list[Subtask]] = Field(default=None, sa_type=sa.JSON)
    metric: Optional[Metric] = Field(default=None, sa_type=sa.JSON)
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={"server_default": sa.func.now()},
        nullable=False,
    )
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={
            "onupdate": lambda: datetime.now(timezone.utc),
        },
        nullable=False,
    )


class Goals(SQLModel, table=True):
    __tablename__ = "goals"  # type: ignore
    model_config = {"arbitrary_types_allowed": True}  # type: ignore

    """ FIELDS """
    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(
        foreign_key="users.id", index=True, ondelete="CASCADE"
    )
    title: str = Field(max_length=200)
    description: Optional[str] = Field(default=None)
    completed: bool = Field(default=False)
    target_date: datetime = Field(default=datetime.now(timezone.utc))
    estimated_total_hours: int = Field(default=0)
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={"server_default": sa.func.now()},
        nullable=False,
    )
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        sa_type=DateTime(timezone=True),  # type: ignore
        sa_column_kwargs={
            "onupdate": lambda: datetime.now(timezone.utc),
        },
        nullable=False,
    )


if __name__ == "__main__":
    engine = create_engine(os.getenv("DATABASE_URL"))
    SQLModel.metadata.drop_all(engine)
    SQLModel.metadata.create_all(engine)
