# import os
# from datetime import date, datetime, timezone
# from typing import Optional

# import sqlalchemy as sa
# from dotenv import load_dotenv
# from sqlmodel import (
#     Date,
#     DateTime,
#     Field,
#     SQLModel,
#     create_engine,
# )

# load_dotenv()


# class User(SQLModel, table=True):
#     __tablename__ = "users"  # type: ignore
#     model_config = {"arbitrary_types_allowed": True}  # type: ignore

#     """ FIELDS """
#     # The id is optional because it will be generated by the database
#     id: Optional[int] = Field(default=None, primary_key=True)
#     name: Optional[str] = Field(max_length=50)
#     telephone_number: str = Field(max_length=20, unique=True, index=True)
#     birthday: Optional[date] = Field(default=None, sa_type=Date)
#     last_message_at: Optional[datetime] = Field(
#         default=None, sa_type=sa.DateTime(timezone=True)
#     )  # type: ignore
#     created_at: Optional[datetime] = Field(
#         default_factory=lambda: datetime.now(timezone.utc),
#         sa_type=DateTime(timezone=True),  # type: ignore
#         sa_column_kwargs={"server_default": sa.func.now()},
#         nullable=False,
#     )
#     updated_at: Optional[datetime] = Field(
#         default_factory=lambda: datetime.now(timezone.utc),
#         sa_type=DateTime(timezone=True),  # type: ignore
#         sa_column_kwargs={
#             "onupdate": lambda: datetime.now(timezone.utc),
#         },
#         nullable=False,
#     )


# class Conversations(SQLModel, table=True):
#     __tablename__ = "conversations"  # type: ignore
#     model_config = {"arbitrary_types_allowed": True}  # type: ignore

#     """ FIELDS """

#     id: Optional[int] = Field(default=None, primary_key=True)
#     user_id: int = Field(
#         foreign_key="users.id", index=True, ondelete="CASCADE"
#     )

#     created_at: Optional[datetime] = Field(
#         default_factory=lambda: datetime.now(timezone.utc),
#         sa_type=DateTime(timezone=True),  # type: ignore
#         sa_column_kwargs={"server_default": sa.func.now()},
#         nullable=False,
#         index=True,
#     )


# class Milestone(SQLModel, table=True):
#     __tablename__ = "milestones"  # type: ignore
#     model_config = {"arbitrary_types_allowed": True}  # type: ignore

#     """ FIELDS """
#     id: Optional[int] = Field(default=None, primary_key=True)
#     user_id: int = Field(
#         foreign_key="users.id", index=True, ondelete="CASCADE"
#     )
#     title: str = Field(max_length=200)
#     description: Optional[str] = Field(default=None)
#     goal_title: Optional[str] = Field(default=None, max_length=200)
#     goal_description: Optional[str] = Field(default=None)
#     completed: bool = Field(default=False)
#     created_at: Optional[datetime] = Field(
#         default_factory=lambda: datetime.now(timezone.utc),
#         sa_type=DateTime(timezone=True),  # type: ignore
#         sa_column_kwargs={"server_default": sa.func.now()},
#         nullable=False,
#     )
#     updated_at: Optional[datetime] = Field(
#         default_factory=lambda: datetime.now(timezone.utc),
#         sa_type=DateTime(timezone=True),  # type: ignore
#         sa_column_kwargs={
#             "onupdate": lambda: datetime.now(timezone.utc),
#         },
#         nullable=False,
#     )


# if __name__ == "__main__":
#     engine = create_engine(os.getenv("DATABASE_URL"))
#     SQLModel.metadata.drop_all(engine)
#     SQLModel.metadata.create_all(engine)
